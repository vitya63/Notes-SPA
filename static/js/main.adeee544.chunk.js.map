{"version":3,"sources":["components/CreateNote.js","components/Comment.js","components/Comments.js","components/NoteItem.js","components/NoteTable.js","components/NoteApp.js","App.js","index.js"],"names":["CreateNote","notes","setNoteList","id","setId","useState","noteName","setNoteName","noteContent","setNoteContent","onSubmit","event","preventDefault","newNote","editing","addingComment","viewingComments","comments","alert","className","Input","type","value","onChange","e","target","placeholder","required","TextArea","Button","Comment","comment","author","content","date","Comments","note","switchAddingViewingComments","publishComment","commentAuthor","setCommentAuthor","commentContent","setCommentContent","commentsCell","style","onClick","length","names","split","every","word","match","currentDate","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","newComment","targetId","focus","map","key","NoteItem","editNote","noteIndex","findIndex","item","updatedNotes","submitChanges","which","keyCode","onDoubleClick","onKeyPress","action","push","filter","NotesTable","theadContent","NotesApp","useEffect","notesFromStorage","JSON","parse","localStorage","getItem","noteIdFromStorage","noteListJson","stringify","setItem","NoteTable","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.adeee544.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Button, TextArea } from 'semantic-ui-react';\n\nconst CreateNote = ({ notes, setNoteList, id, setId }) => {\n  const [noteName, setNoteName] = useState('');\n  const [noteContent, setNoteContent] = useState('');\n\n  const addNote = (event) => {\n    event.preventDefault();\n\n    if (!noteContent) {\n      alert(\"You must add note content\");\n      return;\n    }\n\n    const newNote = {\n      id,\n      noteName,\n      noteContent,\n      editing: false,\n      addingComment: false,\n      viewingComments: false,\n      comments: [],\n    };\n\n    setNoteList([...notes, newNote]);\n    setId(id + 1);\n    setNoteContent('');\n    setNoteName('');\n  }\n\n  return (\n    <form onSubmit={addNote} className=\"create-note-form ui form\">\n      <Input \n        type=\"text\"\n        value={noteName} \n        onChange={(e) => setNoteName(e.target.value)}\n        placeholder=\"Note name\"\n        required\n      />\n      <TextArea \n        placeholder=\"Note content\" \n        value={noteContent} \n        onChange={(e) => setNoteContent(e.target.value)}\n      />\n      <Button type=\"submit\">Add note</Button>\n    </form>\n  );\n};\n\nCreateNote.propTypes = {\n  notes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setNoteList: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n  setId: PropTypes.func.isRequired,\n};\n\nexport default CreateNote;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ comment }) => (\n  <li className=\"comment\">\n    <p className=\"comment__detail\">\n      <b>Author: </b>{comment.author}\n    </p>\n    <p className=\"comment__detail\">\n      <b>Comment: </b>{comment.content}\n    </p>\n    <p className=\"comment__detail\">\n      <b>Publication date: </b>{comment.date}\n    </p>\n  </li>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    author: PropTypes.string,\n    content: PropTypes.string,\n    date: PropTypes.string\n  }).isRequired,\n};\n\nexport default Comment;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from './Comment';\nimport { Button, Input } from 'semantic-ui-react';\n\nconst Comments = ({ \n  note, \n  switchAddingViewingComments, \n  publishComment \n}) => {\n  const [commentAuthor, setCommentAuthor] = useState('');\n  const [commentContent, setCommentContent] = useState('');\n  let commentsCell = <td className=\"cell\">\n    <Button \n      type=\"button\"\n      style={{'width': '48%'}}\n      id={note.id} \n      onClick={(e) => switchAddingViewingComments(e.target.id, 'addingComment')}\n    >\n      Add comment\n    </Button>\n    <Button \n      type=\"button\"\n      style={{'width': '48%'}}\n      id={note.id}\n      onClick={(e) => {\n        if (!note.comments.length) {\n          alert(\"No comments yet\");\n          return;\n        }\n\n        switchAddingViewingComments(e.target.id, 'viewingComments');\n      }}\n    >\n      Show comments\n    </Button>\n  </td>;\n\n  const addComment = (event) => {\n    event.preventDefault();\n    const names = commentAuthor.split(' ');\n\n    if (names.length !== 2) {\n      alert(\"You must write your full name\");\n      return;\n    }\n    if (!names.every(word => word[0].match(/[A-ZА-Я]/))) {\n      alert(\"Name must start with capital letter\");\n      return;\n    }\n    \n    const currentDate = new Date();\n    let dd = currentDate.getDate();\n    let mm = currentDate.getMonth() + 1;\n    const yyyy = currentDate.getFullYear();\n\n    if (dd < 10) {\n      dd = `0${dd}`;\n    }\n    if (mm < 10) {\n      mm = `0${mm}`;\n    }\n    \n    const date = `${dd}.${mm}.${yyyy}`;\n    const newComment = {\n      content: commentContent,\n      author: commentAuthor,\n      date,\n    }\n    const targetId = event.target.id;\n    \n    publishComment(targetId, newComment);\n  }\n\n  if (note.addingComment) {\n    commentsCell = <td className=\"cell\">\n      <form id={note.id} onSubmit={addComment}>\n        <Input \n          type=\"text\" \n          placeholder=\"Your Full Name\" \n          value={commentAuthor}\n          onChange={(e) => {\n            setCommentAuthor(e.target.value)\n          }}\n          style={{'width': '30%'}}\n          focus\n          required\n        />\n        <Input \n          type=\"text\" \n          placeholder=\"Your comment\" \n          value={commentContent}\n          onChange={(e) => setCommentContent(e.target.value)}\n          style={{'width': '30%'}}\n          focus\n          required\n        />\n        <Button type=\"submit\" style={{'width': '19%'}}>\n          Submit\n        </Button>\n        <Button \n          type=\"button\" \n          style={{'width': '19%'}}\n          onClick={() => switchAddingViewingComments(note.id, 'addingComment')}\n        >\n          Cancel\n        </Button>\n      </form>\n    </td>\n  } else if (note.viewingComments) {\n    commentsCell = <td className=\"cell\"><ul>\n      <Button \n        type=\"button\" \n        id={note.id}\n        onClick={(e) => switchAddingViewingComments(e.target.id, 'viewingComments')}\n      >\n        Hide comments\n      </Button>\n      {note.comments.map(comment => <Comment \n        comment={comment} \n        key={note.id}\n      />)}\n    </ul></td>\n  }\n\n  return commentsCell;\n};\n\nComments.propTypes = {\n  note: PropTypes.shape({\n    id: PropTypes.number,\n    noteName: PropTypes.string,\n    noteContent: PropTypes.string,\n    editing: PropTypes.bool,\n    comments: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\n\nexport default Comments;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Comments from './Comments';\nimport { Input, Button } from 'semantic-ui-react';\n\nfunction NoteItem({ note, notes, setNoteList }) {\n  const [noteName, setNoteName] = useState(note.noteName);\n  const [noteContent, setNoteContent] = useState(note.noteContent);\n\n  const removeNote = () => {\n    setNoteList([...notes].filter(item => item !== note));\n  };\n\n  const editNote = (e) => {\n    const noteIndex = notes.findIndex(item => item.id === +e.target.id);\n    let updatedNotes = [...notes];\n    updatedNotes[noteIndex].editing = true;\n    setNoteList([...updatedNotes]);\n  }\n\n  const submitChanges = (e) => {\n    if (e.which === 13 || e.keyCode === 13) {\n      const noteIndex = notes.findIndex(item => item.id === +e.target.id);\n      let updatedNotes = [...notes];\n      updatedNotes[noteIndex].noteName = noteName;\n      updatedNotes[noteIndex].noteContent = noteContent;\n      updatedNotes[noteIndex].editing = false;\n      setNoteList([...updatedNotes]);\n    }\n  }\n\n  const switchAddingViewingComments = (targetId, action) => {\n    const noteIndex = notes.findIndex(item => item.id === +targetId);\n    let updatedNotes = [...notes];\n    if (!updatedNotes[noteIndex][action]) {\n      updatedNotes[noteIndex][action] = true;\n    } else {\n      updatedNotes[noteIndex][action] = false;\n    }\n    setNoteList([...updatedNotes]);\n  }\n\n  const publishComment = (targetId, comment) => {\n    const noteIndex = notes.findIndex(item => item.id === +targetId);\n    let updatedNotes = [...notes];\n    updatedNotes[noteIndex].comments.push(comment);\n    updatedNotes[noteIndex].addingComment = false;\n    setNoteList([...updatedNotes]);\n    alert('Comment succesfully added!');\n  }\n\n  return (\n    <tr>\n      <td className=\"cell\">{note.id}</td>\n      <td className=\"cell\" id={note.id} onDoubleClick={editNote}>\n        {note.editing \n          ? <Input \n            type=\"text\" \n            value={noteName} \n            onChange={(e) => setNoteName(e.target.value)} \n            onKeyPress={submitChanges}\n            id={note.id}\n            className=\"input-for-editing\"\n            focus\n          />\n          : note.noteName\n        }\n      </td>\n      <td className=\"cell\" id={note.id} onDoubleClick={editNote}>\n        {note.editing \n          ? <Input \n            type=\"text\" \n            value={noteContent} \n            onChange={(e) => setNoteContent(e.target.value)} \n            onKeyPress={submitChanges}\n            id={note.id}\n            className=\"input-for-editing\"\n            focus\n          />\n          : note.noteContent\n        }\n      </td>\n      <Comments \n        note={note} \n        switchAddingViewingComments={switchAddingViewingComments} \n        publishComment={publishComment}\n      />\n      <td className=\"cell\">\n        <Button style={{'width': '100%'}} type=\"button\" onClick={removeNote}>\n          Remove note\n        </Button>\n      </td>\n    </tr>\n  );\n}\n\nNoteItem.propTypes = {\n  note: PropTypes.shape({\n    id: PropTypes.number,\n    noteName: PropTypes.string,\n    noteContent: PropTypes.string,\n    editing: PropTypes.bool,\n    comments: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  notes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setNoteList: PropTypes.func.isRequired\n};\n\nexport default NoteItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NoteItem from './NoteItem';\n\nconst NotesTable = ({ notes, setNoteList }) => {\n  let theadContent = <tr><th>No notes found</th></tr>;\n\n  if (notes.length > 0) {\n    theadContent = <tr>\n      <th className=\"cell\">\n        Id\n      </th>\n      <th className=\"cell\">\n        Note name\n      </th>\n      <th className=\"cell\">\n        Note content\n      </th>\n      <th className=\"cell\">\n        Comments\n      </th>\n      <th className=\"cell\">\n        Delete\n      </th>\n    </tr>\n  }\n\n  return (\n    <table className=\"table\">\n      <thead className=\"thead\">\n        {theadContent}\n      </thead>\n      <tbody>\n        {notes.map(note => (\n          <NoteItem \n            note={note} \n            key={note.id} \n            setNoteList={setNoteList} \n            notes={notes} \n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nNotesTable.propTypes = {\n  notes: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setNoteList: PropTypes.func.isRequired,\n};\n\nexport default NotesTable;\n","import React, { useState, useEffect } from 'react';\nimport CreateNote from './CreateNote';\nimport NoteTable from './NoteTable';\n\nconst NotesApp = () => {\n  const [notes, setNoteList] = useState([]);\n  const [id, setId] = useState(1);\n\n  useEffect(() => {\n    const notesFromStorage = JSON.parse(localStorage.getItem('noteList'));\n    const noteIdFromStorage = +localStorage.getItem('noteId');\n\n    if (notesFromStorage) {\n      setNoteList([...notesFromStorage]);\n      setId(noteIdFromStorage);\n    }\n  }, [])\n\n  useEffect(() => {\n    const noteListJson = JSON.stringify(notes);\n    localStorage.setItem('noteList', noteListJson);\n    localStorage.setItem('noteId', id);\n  }, [notes, id])\n\n  return (\n    <>\n      <header className=\"header\">Notes</header>\n      <CreateNote \n        setNoteList={setNoteList} \n        notes={notes} \n        id={id}\n        setId={setId} \n      />\n      <NoteTable notes={notes} setNoteList={setNoteList} />\n    </>\n  );\n};\n\nexport default NotesApp;","import React from 'react';\nimport './App.css';\nimport NotesApp from './components/NoteApp';\n\nfunction App() {\n  return (\n    <NotesApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}